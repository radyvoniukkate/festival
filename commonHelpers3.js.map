{"version":3,"file":"commonHelpers3.js","sources":["../src/api/festival.js","../src/js/signup.js"],"sourcesContent":["import axios from './index.js';\n\nconst BASE_URL = 'http://localhost:8080/festival';\nconst AUTH_URL = 'http://localhost:8080/auth';\n\nexport async function getAllParticipants() {\n  try {\n    const response = await axios.get(`${BASE_URL}/participants`);\n    return response.data;\n  } catch (error) {\n    throw new Error(\n      `Failed to fetch participants: ${\n        error.response?.statusText || error.message\n      }`\n    );\n  }\n}\n\nexport async function getParticipantById(id) {\n  try {\n    const response = await axios.get(`${BASE_URL}/participants/${id}`);\n    return response.data;\n  } catch (error) {\n    throw new Error(\n      `Failed to fetch participant with ID ${id}: ${\n        error.response?.statusText || error.message\n      }`\n    );\n  }\n}\n\nexport async function createParticipant(participant) {\n  try {\n    const response = await axios.post(`${BASE_URL}/participants`, participant);\n    return response.data;\n  } catch (error) {\n    throw new Error(\n      `Failed to create participant: ${\n        error.response?.statusText || error.message\n      }`\n    );\n  }\n}\n\nexport async function updateParticipant(id, updatedParticipant) {\n  try {\n    const response = await axios.put(\n      `${BASE_URL}/participants/${id}`,\n      updatedParticipant\n    );\n    return response.data;\n  } catch (error) {\n    throw new Error(\n      `Failed to update participant with ID ${id}: ${\n        error.response?.statusText || error.message\n      }`\n    );\n  }\n}\n\nexport async function deleteParticipant(id) {\n  try {\n    const response = await axios.delete(`${BASE_URL}/participants/${id}`);\n    return response.status === 204; // HTTP 204 No Content indicates successful deletion\n  } catch (error) {\n    throw new Error(\n      `Failed to delete participant with ID ${id}: ${\n        error.response?.statusText || error.message\n      }`\n    );\n  }\n}\n\nexport async function getAllTasks() {\n  try {\n    const response = await axios.get(`${BASE_URL}/tasks`);\n    return response.data;\n  } catch (error) {\n    throw new Error(\n      `Failed to fetch tasks: ${error.response?.statusText || error.message}`\n    );\n  }\n}\n\nexport async function getTaskById(id) {\n  try {\n    const response = await axios.get(`${BASE_URL}/tasks/${id}`);\n    return response.data;\n  } catch (error) {\n    throw new Error(\n      `Failed to fetch task with ID ${id}: ${\n        error.response?.statusText || error.message\n      }`\n    );\n  }\n}\n\nexport async function createTask(task) {\n  try {\n    const response = await axios.post(`${BASE_URL}/tasks`, task);\n    return response.data;\n  } catch (error) {\n    throw new Error(\n      `Failed to create task: ${error.response?.statusText || error.message}`\n    );\n  }\n}\n\nexport async function updateTask(id, task) {\n  try {\n    const response = await axios.put(`${BASE_URL}/tasks/${id}`, task);\n    return response.data;\n  } catch (error) {\n    throw new Error(\n      `Failed to update task with ID ${id}: ${\n        error.response?.statusText || error.message\n      }`\n    );\n  }\n}\n\nexport async function deleteTask(id) {\n  try {\n    const response = await axios.delete(`${BASE_URL}/tasks/${id}`);\n    return response.status === 204;\n  } catch (error) {\n    throw new Error(\n      `Failed to delete task with ID ${id}: ${\n        error.response?.statusText || error.message\n      }`\n    );\n  }\n}\n\nexport async function getAllCriteria() {\n  try {\n    const response = await axios.get(`${BASE_URL}/criteria`);\n    return response.data;\n  } catch (error) {\n    throw new Error(\n      `Failed to fetch criteria: ${error.response?.statusText || error.message}`\n    );\n  }\n}\n\nexport async function getCriteriaById(id) {\n  try {\n    const response = await axios.get(`${BASE_URL}/criteria/${id}`);\n    return response.data;\n  } catch (error) {\n    throw new Error(\n      `Failed to fetch criteria with ID ${id}: ${\n        error.response?.statusText || error.message\n      }`\n    );\n  }\n}\n\nexport async function createCriteria(criteria) {\n  try {\n    const response = await axios.post(`${BASE_URL}/criteria`, criteria);\n    return response.data;\n  } catch (error) {\n    throw new Error(\n      `Failed to create criteria: ${\n        error.response?.statusText || error.message\n      }`\n    );\n  }\n}\n\nexport async function updateCriteria(id, criteria) {\n  try {\n    const response = await axios.put(`${BASE_URL}/criteria/${id}`, criteria);\n    return response.data;\n  } catch (error) {\n    throw new Error(\n      `Failed to update criteria with ID ${id}: ${\n        error.response?.statusText || error.message\n      }`\n    );\n  }\n}\n\nexport async function deleteCriteria(id) {\n  try {\n    const response = await axios.delete(`${BASE_URL}/criteria/${id}`);\n    return response.status === 204;\n  } catch (error) {\n    throw new Error(\n      `Failed to delete criteria with ID ${id}: ${\n        error.response?.statusText || error.message\n      }`\n    );\n  }\n}\n\nexport async function getAllJury() {\n  try {\n    const response = await axios.get(`${BASE_URL}/jury`);\n    return response.data;\n  } catch (error) {\n    throw new Error(\n      `Failed to fetch jury members: ${\n        error.response?.statusText || error.message\n      }`\n    );\n  }\n}\n\nexport async function getJuryById(id) {\n  try {\n    const response = await axios.get(`${BASE_URL}/jury/${id}`);\n    return response.data;\n  } catch (error) {\n    throw new Error(\n      `Failed to fetch jury member with ID ${id}: ${\n        error.response?.statusText || error.message\n      }`\n    );\n  }\n}\n\nexport async function createJury(jury) {\n  try {\n    const response = await axios.post(`${BASE_URL}/jury`, jury);\n    return response.data;\n  } catch (error) {\n    throw new Error(\n      `Failed to create jury member: ${\n        error.response?.statusText || error.message\n      }`\n    );\n  }\n}\n\nexport async function updateJury(id, jury) {\n  try {\n    const response = await axios.put(`${BASE_URL}/jury/${id}`, jury);\n    return response.data;\n  } catch (error) {\n    throw new Error(\n      `Failed to update jury member with ID ${id}: ${\n        error.response?.statusText || error.message\n      }`\n    );\n  }\n}\n\nexport async function deleteJury(id) {\n  try {\n    const response = await axios.delete(`${BASE_URL}/jury/${id}`);\n    return response.status === 204;\n  } catch (error) {\n    throw new Error(\n      `Failed to delete jury member with ID ${id}: ${\n        error.response?.statusText || error.message\n      }`\n    );\n  }\n}\n\nexport async function getAllPrizes() {\n  try {\n    const response = await axios.get(`${BASE_URL}/prizes`);\n    return response.data;\n  } catch (error) {\n    throw new Error(\n      `Failed to fetch prizes: ${error.response?.statusText || error.message}`\n    );\n  }\n}\n\nexport async function getPrizeById(id) {\n  try {\n    const response = await axios.get(`${BASE_URL}/prizes/${id}`);\n    return response.data;\n  } catch (error) {\n    throw new Error(\n      `Failed to fetch prize with ID ${id}: ${\n        error.response?.statusText || error.message\n      }`\n    );\n  }\n}\n\nexport async function createPrize(prize) {\n  try {\n    const response = await axios.post(`${BASE_URL}/prizes`, prize);\n    return response.data;\n  } catch (error) {\n    throw new Error(\n      `Failed to create prize: ${error.response?.statusText || error.message}`\n    );\n  }\n}\n\nexport async function updatePrize(id, prize) {\n  try {\n    const response = await axios.put(`${BASE_URL}/prizes/${id}`, prize);\n    return response.data;\n  } catch (error) {\n    throw new Error(\n      `Failed to update prize with ID ${id}: ${\n        error.response?.statusText || error.message\n      }`\n    );\n  }\n}\n\nexport async function deletePrize(id) {\n  try {\n    const response = await axios.delete(`${BASE_URL}/prizes/${id}`);\n    return response.status === 204;\n  } catch (error) {\n    throw new Error(\n      `Failed to delete prize with ID ${id}: ${\n        error.response?.statusText || error.message\n      }`\n    );\n  }\n}\n\nexport async function getHostById(id) {\n  try {\n    const response = await axios.get(`${BASE_URL}/host/${id}`);\n    return response.data;\n  } catch (error) {\n    throw new Error(\n      `Failed to fetch host with ID ${id}: ${\n        error.response?.statusText || error.message\n      }`\n    );\n  }\n}\n\nexport async function createHost(host) {\n  try {\n    const response = await axios.post(`${BASE_URL}/host`, host);\n    return response.data;\n  } catch (error) {\n    throw new Error(\n      `Failed to create host: ${error.response?.statusText || error.message}`\n    );\n  }\n}\n\nexport async function updateHost(id, host) {\n  try {\n    const response = await axios.put(`${BASE_URL}/host/${id}`, host);\n    return response.data;\n  } catch (error) {\n    throw new Error(\n      `Failed to update host with ID ${id}: ${\n        error.response?.statusText || error.message\n      }`\n    );\n  }\n}\n\nexport async function deleteHost(id) {\n  try {\n    const response = await axios.delete(`${BASE_URL}/host/${id}`);\n    return response.status === 204;\n  } catch (error) {\n    throw new Error(\n      `Failed to delete host with ID ${id}: ${\n        error.response?.statusText || error.message\n      }`\n    );\n  }\n}\nexport async function getAllRequisites() {\n  try {\n    const response = await axios.get(`${BASE_URL}/requisites`);\n    return response.data;\n  } catch (error) {\n    throw new Error(\n      `Failed to fetch requisites: ${\n        error.response?.statusText || error.message\n      }`\n    );\n  }\n}\n\nexport async function getRequisitesById(id) {\n  try {\n    const response = await axios.get(`${BASE_URL}/requisites/${id}`);\n    return response.data;\n  } catch (error) {\n    throw new Error(\n      `Failed to fetch requisites with ID ${id}: ${\n        error.response?.statusText || error.message\n      }`\n    );\n  }\n}\n\nexport async function createRequisites(requisites) {\n  try {\n    const response = await axios.post(`${BASE_URL}/requisites`, requisites);\n    return response.data;\n  } catch (error) {\n    throw new Error(\n      `Failed to create requisites: ${\n        error.response?.statusText || error.message\n      }`\n    );\n  }\n}\n\nexport async function updateRequisites(id, requisites) {\n  try {\n    const response = await axios.put(\n      `${BASE_URL}/requisites/${id}`,\n      requisites\n    );\n    return response.data;\n  } catch (error) {\n    throw new Error(\n      `Failed to update requisites with ID ${id}: ${\n        error.response?.statusText || error.message\n      }`\n    );\n  }\n}\n\nexport async function deleteRequisites(id) {\n  try {\n    const response = await axios.delete(`${BASE_URL}/requisites/${id}`);\n    return response.status === 204;\n  } catch (error) {\n    throw new Error(\n      `Failed to delete requisites with ID ${id}: ${\n        error.response?.statusText || error.message\n      }`\n    );\n  }\n}\n\nexport async function getAllEquipment() {\n  try {\n    const response = await axios.get(`${BASE_URL}/equipment`);\n    return response.data;\n  } catch (error) {\n    throw new Error(\n      `Failed to fetch equipment: ${\n        error.response?.statusText || error.message\n      }`\n    );\n  }\n}\n\nexport async function getEquipmentById(id) {\n  try {\n    const response = await axios.get(`${BASE_URL}/equipment/${id}`);\n    return response.data;\n  } catch (error) {\n    throw new Error(\n      `Failed to fetch equipment with ID ${id}: ${\n        error.response?.statusText || error.message\n      }`\n    );\n  }\n}\n\nexport async function createEquipment(equipment) {\n  try {\n    const response = await axios.post(`${BASE_URL}/equipment`, equipment);\n    return response.data;\n  } catch (error) {\n    throw new Error(\n      `Failed to create equipment: ${\n        error.response?.statusText || error.message\n      }`\n    );\n  }\n}\n\nexport async function updateEquipment(id, equipment) {\n  try {\n    const response = await axios.put(`${BASE_URL}/equipment/${id}`, equipment);\n    return response.data;\n  } catch (error) {\n    throw new Error(\n      `Failed to update equipment with ID ${id}: ${\n        error.response?.statusText || error.message\n      }`\n    );\n  }\n}\n\nexport async function deleteEquipment(id) {\n  try {\n    const response = await axios.delete(`${BASE_URL}/equipment/${id}`);\n    return response.status === 204;\n  } catch (error) {\n    throw new Error(\n      `Failed to delete equipment with ID ${id}: ${\n        error.response?.statusText || error.message\n      }`\n    );\n  }\n}\nexport async function getAllVenues() {\n  try {\n    const response = await axios.get(`${BASE_URL}/venue`);\n    return response.data;\n  } catch (error) {\n    throw new Error(\n      `Failed to fetch venues: ${error.response?.statusText || error.message}`\n    );\n  }\n}\n\nexport async function getVenueById(id) {\n  try {\n    const response = await axios.get(`${BASE_URL}/venue/${id}`);\n    return response.data;\n  } catch (error) {\n    throw new Error(\n      `Failed to fetch venue with ID ${id}: ${\n        error.response?.statusText || error.message\n      }`\n    );\n  }\n}\n\nexport async function createVenue(venue) {\n  try {\n    const response = await axios.post(`${BASE_URL}/venue`, venue);\n    return response.data;\n  } catch (error) {\n    throw new Error(\n      `Failed to create venue: ${error.response?.statusText || error.message}`\n    );\n  }\n}\n\nexport async function updateVenue(id, venue) {\n  try {\n    const response = await axios.put(`${BASE_URL}/venue/${id}`, venue);\n    return response.data;\n  } catch (error) {\n    throw new Error(\n      `Failed to update venue with ID ${id}: ${\n        error.response?.statusText || error.message\n      }`\n    );\n  }\n}\n\nexport async function deleteVenue(id) {\n  try {\n    const response = await axios.delete(`${BASE_URL}/venue/${id}`);\n    return response.status === 204;\n  } catch (error) {\n    throw new Error(\n      `Failed to delete venue with ID ${id}: ${\n        error.response?.statusText || error.message\n      }`\n    );\n  }\n}\n\nexport async function getAllAudience() {\n  try {\n    const response = await axios.get(`${BASE_URL}/audience`);\n    return response.data;\n  } catch (error) {\n    throw new Error(\n      `Failed to fetch audience: ${error.response?.statusText || error.message}`\n    );\n  }\n}\n\nexport async function getAudienceById(id) {\n  try {\n    const response = await axios.get(`${BASE_URL}/audience/${id}`);\n    return response.data;\n  } catch (error) {\n    throw new Error(\n      `Failed to fetch audience with ID ${id}: ${\n        error.response?.statusText || error.message\n      }`\n    );\n  }\n}\n\nexport async function createAudience(audience) {\n  try {\n    const response = await axios.post(`${BASE_URL}/audience`, audience);\n    return response.data;\n  } catch (error) {\n    throw new Error(\n      `Failed to create audience: ${\n        error.response?.statusText || error.message\n      }`\n    );\n  }\n}\n\nexport async function updateAudience(id, audience) {\n  try {\n    const response = await axios.put(`${BASE_URL}/audience/${id}`, audience);\n    return response.data;\n  } catch (error) {\n    throw new Error(\n      `Failed to update audience with ID ${id}: ${\n        error.response?.statusText || error.message\n      }`\n    );\n  }\n}\n\nexport async function deleteAudience(id) {\n  try {\n    const response = await axios.delete(`${BASE_URL}/audience/${id}`);\n    return response.status === 204;\n  } catch (error) {\n    throw new Error(\n      `Failed to delete audience with ID ${id}: ${\n        error.response?.statusText || error.message\n      }`\n    );\n  }\n}\nexport async function signUp(user) {\n  try {\n    const response = await fetch(`${AUTH_URL}/signup`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(user),\n    });\n    return response.text();\n  } catch (error) {\n    throw new Error(`Failed to sign up user: ${error.message}`);\n  }\n}\n\nexport async function logIn(user) {\n  try {\n    const response = await fetch(`${AUTH_URL}/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(user),\n    });\n    return response.json();\n  } catch (error) {\n    throw new Error(`Failed to log in user: ${error.message}`);\n  }\n}\n\nexport async function exampleUsage() {\n  try {\n    // Sign up a new user\n    let signUpResponse = await axios.post(`${AUTH_URL}/signup`, {\n      username: 'newuser',\n      password: 'password123',\n    });\n    console.log('Sign Up Response:', signUpResponse.data);\n\n    // Log in the user\n    let logInResponse = await axios.post(`${AUTH_URL}/login`, {\n      username: 'newuser',\n      password: 'password123',\n    });\n    console.log('Log In Response:', logInResponse.data);\n\n    // Create a new participant\n    let newParticipant = { name: 'Jane Doe', email: 'jane@example.com' };\n    let createdParticipant = await createParticipant(newParticipant);\n    console.log('Created Participant:', createdParticipant);\n\n    // Get all participants\n    let participants = await getAllParticipants();\n    console.log('All Participants:', participants);\n\n    // Get a participant by ID\n    let participant = await getParticipantById(1);\n    console.log('Participant with ID 1:', participant);\n\n    // Update a participant\n    let updatedParticipant = await updateParticipant(1, {\n      name: 'Jane Doe Updated',\n      email: 'jane_updated@example.com',\n    });\n    console.log('Updated Participant:', updatedParticipant);\n\n    // Delete a participant\n    let deleteResponse = await deleteParticipant(1);\n    console.log('Delete Response:', deleteResponse);\n\n    // Similarly, you can use other functions for tasks, criteria, jury, prizes, host, requisites, equipment, venue, and audience.\n  } catch (error) {\n    console.error('Error:', error);\n  }\n}\n\nexport async function exampleTasksUsage() {\n  try {\n    // Create a new task\n    let newTask = { name: 'New Task', description: 'Task description' };\n    let createdTask = await axios.post(`${BASE_URL}/tasks`, newTask);\n    console.log('Created Task:', createdTask.data);\n\n    // Get all tasks\n    let tasks = await axios.get(`${BASE_URL}/tasks`);\n    console.log('All Tasks:', tasks.data);\n\n    // Get a task by ID\n    let task = await axios.get(`${BASE_URL}/tasks/1`);\n    console.log('Task with ID 1:', task.data);\n\n    // Update a task\n    let updatedTask = await axios.put(`${BASE_URL}/tasks/1`, {\n      name: 'Updated Task',\n      description: 'Updated description',\n    });\n    console.log('Updated Task:', updatedTask.data);\n\n    // Delete a task\n    let deleteResponse = await axios.delete(`${BASE_URL}/tasks/1`);\n    console.log('Delete Task Response:', deleteResponse.data);\n  } catch (error) {\n    console.error('Error with tasks:', error);\n  }\n}\n\nexport async function exampleCriteriaUsage() {\n  try {\n    // Create a new criteria\n    let newCriteria = {\n      name: 'New Criteria',\n      description: 'Criteria description',\n    };\n    let createdCriteria = await axios.post(`${BASE_URL}/criteria`, newCriteria);\n    console.log('Created Criteria:', createdCriteria.data);\n\n    // Get all criteria\n    let allCriteria = await axios.get(`${BASE_URL}/criteria`);\n    console.log('All Criteria:', allCriteria.data);\n\n    // Get criteria by ID\n    let criteria = await axios.get(`${BASE_URL}/criteria/1`);\n    console.log('Criteria with ID 1:', criteria.data);\n\n    // Update criteria\n    let updatedCriteria = await axios.put(`${BASE_URL}/criteria/1`, {\n      name: 'Updated Criteria',\n      description: 'Updated description',\n    });\n    console.log('Updated Criteria:', updatedCriteria.data);\n\n    // Delete criteria\n    let deleteResponse = await axios.delete(`${BASE_URL}/criteria/1`);\n    console.log('Delete Criteria Response:', deleteResponse.data);\n  } catch (error) {\n    console.error('Error with criteria:', error);\n  }\n}\n\nexport async function examplePrizesUsage() {\n  try {\n    // Create a new prize\n    let newPrize = { name: 'New Prize', description: 'Prize description' };\n    let createdPrize = await axios.post(`${BASE_URL}/prizes`, newPrize);\n    console.log('Created Prize:', createdPrize.data);\n\n    // Get all prizes\n    let prizes = await axios.get(`${BASE_URL}/prizes`);\n    console.log('All Prizes:', prizes.data);\n\n    // Get a prize by ID\n    let prize = await axios.get(`${BASE_URL}/prizes/1`);\n    console.log('Prize with ID 1:', prize.data);\n\n    // Update a prize\n    let updatedPrize = await axios.put(`${BASE_URL}/prizes/1`, {\n      name: 'Updated Prize',\n      description: 'Updated description',\n    });\n    console.log('Updated Prize:', updatedPrize.data);\n\n    // Delete a prize\n    let deleteResponse = await axios.delete(`${BASE_URL}/prizes/1`);\n    console.log('Delete Prize Response:', deleteResponse.data);\n  } catch (error) {\n    console.error('Error with prizes:', error);\n  }\n}\nexport async function exampleHostUsage() {\n  try {\n    // Create a new host\n    let newHost = { name: 'New Host', email: 'host@example.com' };\n    let createdHost = await axios.post(`${BASE_URL}/host`, newHost);\n    console.log('Created Host:', createdHost.data);\n\n    // Get a host by ID\n    let host = await axios.get(`${BASE_URL}/host/1`);\n    console.log('Host with ID 1:', host.data);\n\n    // Update a host\n    let updatedHost = await axios.put(`${BASE_URL}/host/1`, {\n      name: 'Updated Host',\n      email: 'updated_host@example.com',\n    });\n    console.log('Updated Host:', updatedHost.data);\n\n    // Delete a host\n    let deleteResponse = await axios.delete(`${BASE_URL}/host/1`);\n    console.log('Delete Host Response:', deleteResponse.data);\n  } catch (error) {\n    console.error('Error with host:', error);\n  }\n}\n\nexport async function exampleRequisitesUsage() {\n  try {\n    // Create a new requisites\n    let newRequisites = {\n      name: 'New Requisites',\n      description: 'Requisites description',\n    };\n    let createdRequisites = await axios.post(\n      `${BASE_URL}/requisites`,\n      newRequisites\n    );\n    console.log('Created Requisites:', createdRequisites.data);\n\n    // Get all requisites\n    let requisites = await axios.get(`${BASE_URL}/requisites`);\n    console.log('All Requisites:', requisites.data);\n\n    // Get requisites by ID\n    let requisite = await axios.get(`${BASE_URL}/requisites/1`);\n    console.log('Requisites with ID 1:', requisite.data);\n\n    // Update requisites\n    let updatedRequisites = await axios.put(`${BASE_URL}/requisites/1`, {\n      name: 'Updated Requisites',\n      description: 'Updated description',\n    });\n    console.log('Updated Requisites:', updatedRequisites.data);\n\n    // Delete requisites\n    let deleteResponse = await axios.delete(`${BASE_URL}/requisites/1`);\n    console.log('Delete Requisites Response:', deleteResponse.data);\n  } catch (error) {\n    console.error('Error with requisites:', error);\n  }\n}\n\nexport async function exampleEquipmentUsage() {\n  try {\n    // Create new equipment\n    let newEquipment = {\n      name: 'New Equipment',\n      description: 'Equipment description',\n    };\n    let createdEquipment = await axios.post(\n      `${BASE_URL}/equipment`,\n      newEquipment\n    );\n    console.log('Created Equipment:', createdEquipment.data);\n\n    // Get all equipment\n    let equipment = await axios.get(`${BASE_URL}/equipment`);\n    console.log('All Equipment:', equipment.data);\n\n    // Get equipment by ID\n    let equipmentItem = await axios.get(`${BASE_URL}/equipment/1`);\n    console.log('Equipment with ID 1:', equipmentItem.data);\n\n    // Update equipment\n    let updatedEquipment = await axios.put(`${BASE_URL}/equipment/1`, {\n      name: 'Updated Equipment',\n      description: 'Updated description',\n    });\n    console.log('Updated Equipment:', updatedEquipment.data);\n\n    // Delete equipment\n    let deleteResponse = await axios.delete(`${BASE_URL}/equipment/1`);\n    console.log('Delete Equipment Response:', deleteResponse.data);\n  } catch (error) {\n    console.error('Error with equipment:', error);\n  }\n}\n\nexport async function exampleVenueUsage() {\n  try {\n    // Create a new venue\n    let newVenue = { name: 'New Venue', description: 'Venue description' };\n    let createdVenue = await axios.post(`${BASE_URL}/venue`, newVenue);\n    console.log('Created Venue:', createdVenue.data);\n\n    // Get all venues\n    let venues = await axios.get(`${BASE_URL}/venue`);\n    console.log('All Venues:', venues.data);\n\n    // Get a venue by ID\n    let venue = await axios.get(`${BASE_URL}/venue/1`);\n    console.log('Venue with ID 1:', venue.data);\n\n    // Update a venue\n    let updatedVenue = await axios.put(`${BASE_URL}/venue/1`, {\n      name: 'Updated Venue',\n      description: 'Updated description',\n    });\n    console.log('Updated Venue:', updatedVenue.data);\n\n    // Delete a venue\n    let deleteResponse = await axios.delete(`${BASE_URL}/venue/1`);\n    console.log('Delete Venue Response:', deleteResponse.data);\n  } catch (error) {\n    console.error('Error with venue:', error);\n  }\n}\n\nexport async function exampleAudienceUsage() {\n  try {\n    // Create a new audience\n    let newAudience = {\n      name: 'New Audience',\n      description: 'Audience description',\n    };\n    let createdAudience = await axios.post(`${BASE_URL}/audience`, newAudience);\n    console.log('Created Audience:', createdAudience.data);\n\n    // Get all audience\n    let audiences = await axios.get(`${BASE_URL}/audience`);\n    console.log('All Audience:', audiences.data);\n\n    // Get audience by ID\n    let audience = await axios.get(`${BASE_URL}/audience/1`);\n    console.log('Audience with ID 1:', audience.data);\n\n    // Update audience\n    let updatedAudience = await axios.put(`${BASE_URL}/audience/1`, {\n      name: 'Updated Audience',\n      description: 'Updated description',\n    });\n    console.log('Updated Audience:', updatedAudience.data);\n\n    // Delete audience\n    let deleteResponse = await axios.delete(`${BASE_URL}/audience/1`);\n    console.log('Delete Audience Response:', deleteResponse.data);\n  } catch (error) {\n    console.error('Error with audience:', error);\n  }\n}\n","import { signUp } from '../api/festival.js';\n\nconst formData = {\n  //email: '',\n  username: '',\n  //name: '',\n  password: '',\n};\n\nconst form = document.querySelector('.feedback-form');\n\nconst loadFormDataFromLocalStorage = () => {\n  const savedData = localStorage.getItem('feedback-form-state');\n  if (savedData) {\n    const parsedData = JSON.parse(savedData);\n    Object.assign(formData, parsedData); // Копіюємо властивості з parsedData в formData\n    //form.elements.email.value = formData.email;\n    form.elements.username.value = formData.username;\n    //form.elements.name.value = formData.name;\n    form.elements.password.value = formData.password;\n  }\n};\n\nloadFormDataFromLocalStorage();\n\nform.addEventListener('input', event => {\n  const { name, value } = event.target;\n\n  formData[name] = value;\n\n  localStorage.setItem('feedback-form-state', JSON.stringify(formData));\n});\n\nconst isFormValid = () => {\n  return (\n    //formData.email.trim() !== '' &&\n    formData.username.trim() !== '' &&\n    //formData.name.trim() !== '' &&\n    formData.password.trim() !== ''\n  );\n};\n\nform.addEventListener('submit', event => {\n  event.preventDefault();\n  \n  if (!isFormValid()) {\n    return;\n  }\n  const response = signUp(formData);\n  \n  console.log(formData);\n  console.log(response);\n  localStorage.removeItem('feedback-form-state');\n  form.reset();\n  Object.keys(formData).forEach(key => (formData[key] = '')); // Очищаємо дані у formData\n});\n"],"names":["AUTH_URL","signUp","user","error","formData","form","loadFormDataFromLocalStorage","savedData","parsedData","event","name","value","isFormValid","response","key"],"mappings":"uEAGA,MAAMA,EAAW,6BAgnBV,eAAeC,EAAOC,EAAM,CACjC,GAAI,CAQF,OAPiB,MAAM,MAAM,GAAGF,CAAQ,UAAW,CACjD,OAAQ,OACR,QAAS,CACP,eAAgB,kBACjB,EACD,KAAM,KAAK,UAAUE,CAAI,CAC/B,CAAK,GACe,MACjB,OAAQC,EAAO,CACd,MAAM,IAAI,MAAM,2BAA2BA,EAAM,OAAO,EAAE,CAC3D,CACH,CC9nBA,MAAMC,EAAW,CAEf,SAAU,GAEV,SAAU,EACZ,EAEMC,EAAO,SAAS,cAAc,gBAAgB,EAE9CC,EAA+B,IAAM,CACzC,MAAMC,EAAY,aAAa,QAAQ,qBAAqB,EAC5D,GAAIA,EAAW,CACb,MAAMC,EAAa,KAAK,MAAMD,CAAS,EACvC,OAAO,OAAOH,EAAUI,CAAU,EAElCH,EAAK,SAAS,SAAS,MAAQD,EAAS,SAExCC,EAAK,SAAS,SAAS,MAAQD,EAAS,QACzC,CACH,EAEAE,IAEAD,EAAK,iBAAiB,QAASI,GAAS,CACtC,KAAM,CAAE,KAAAC,EAAM,MAAAC,GAAUF,EAAM,OAE9BL,EAASM,CAAI,EAAIC,EAEjB,aAAa,QAAQ,sBAAuB,KAAK,UAAUP,CAAQ,CAAC,CACtE,CAAC,EAED,MAAMQ,EAAc,IAGhBR,EAAS,SAAS,KAAI,IAAO,IAE7BA,EAAS,SAAS,KAAI,IAAO,GAIjCC,EAAK,iBAAiB,SAAUI,GAAS,CAGvC,GAFAA,EAAM,eAAc,EAEhB,CAACG,EAAW,EACd,OAEF,MAAMC,EAAWZ,EAAOG,CAAQ,EAEhC,QAAQ,IAAIA,CAAQ,EACpB,QAAQ,IAAIS,CAAQ,EACpB,aAAa,WAAW,qBAAqB,EAC7CR,EAAK,MAAK,EACV,OAAO,KAAKD,CAAQ,EAAE,QAAQU,GAAQV,EAASU,CAAG,EAAI,EAAG,CAC3D,CAAC"}